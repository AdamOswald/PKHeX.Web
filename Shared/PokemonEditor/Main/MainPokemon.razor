@inject Services.PokemonEditorService PokemonEditorService
@inject Services.SpriteService SpriteService
@inject Services.SaveFileService SaveFileService
@implements IDisposable

@{
  var pkm = PokemonEditorService.Pokemon;
  var saveFile = SaveFileService.SaveFile;
}

@if (pkm != null)
{
  <div style="border: 1px solid black;
  position: relative;
  width: 68px;
  height: 56px;">
  <PokemonWithItem Pokemon="pkm" />
</div>
  <div class="d-flex flex-col">
    <MudCheckBox Checked="@pkm.IsShiny" CheckedChanged="@((bool value) => pkm.SetShiny())" Color="Color.Warning"
    CheckedIcon="@Icons.Material.Filled.Star" UncheckedIcon="@Icons.Material.Filled.StarOutline"
    Disabled="@pkm.IsShiny" />
    @if (saveFile.Generation >= 3)
    {
      //TODO: disabled for now
      <MudTextField Value="@pkm.PID.ToString("X")" Label="PID" Variant="Variant.Text" Disabled />
      <MudButton Variant="Variant.Filled" Size="Size.Small" @onclick="@(() => pkm.SetPIDGender(pkm.Gender))">Reroll
      </MudButton>
    }
  </div>

  <MudAutocomplete Margin="Margin.Dense" Dense="true" T="int" Value="pkm.Species" SearchFunc="@Search"
  ToStringFunc="@(e=> Util.GetSpeciesList("en")[e])" MaxItems="8" ValueChanged="SpeciesChanged" Label="Species">
    <ItemTemplate Context="idx">
      <img src="@SpriteService.GetPokemonBySpeciesId(idx)" alt="" /> @Util.GetSpeciesList("en")[idx]
    </ItemTemplate>
  </MudAutocomplete>

  <div class="d-flex flex-col">
    <MudCheckBox Checked="@pkm.IsNicknamed" CheckedChanged="@((bool value) => SetIsNicknamed(value))" />
    <MudTextField Value="pkm.Nickname" ValueChanged="@((string value) => SetNickname(value))" Immediate="true"
    Label="Nickname" Variant="Variant.Text" MaxLength="saveFile.NickLength" Counter="saveFile.NickLength" />
  </div>

  <div class="d-flex flex-col">
    <MudNumericField @bind-Value="pkm.EXP" Immediate Label="EXP" Variant="Variant.Text" Class="mr-2" />
    <MudNumericField @bind-Value="pkm.CurrentLevel" Immediate Label="LEVEL" Variant="Variant.Text" />
  </div>

  @if (saveFile.Generation >= 3)
  {
    <MudAutocomplete Margin="Margin.Dense" Dense="true" T="int" Value="pkm.Nature" SearchFunc="@SearchNatures"
  ToStringFunc="@(e=> Util.GetNaturesList("en")[e])" MaxItems="null" ValueChanged="NatureChanged" Label="Nature" />
  }

  @if (saveFile.Generation >= 8)
  {
    var pk8 = (G8PKM)pkm;
    <MudAutocomplete Margin="Margin.Dense" Dense="true" T="int" Value="pk8.StatNature" SearchFunc="@SearchNatures"
  ToStringFunc="@(e=> Util.GetNaturesList("en")[e])" MaxItems="null" ValueChanged="e => pkm.SetNature(e)"
  Label="Stat Nature" />
  }

  // use HasFormSelection ?
  @if (pkm.PersonalInfo.HasForms)
  {
    var list = FormConverter.GetFormList(pkm.Species, GameInfo.Strings.types, GameInfo.Strings.forms, new[] { "-", "M",
"F"}, saveFile.Generation);
    <MudSelect T="int" Value="@pkm.Form" ValueChanged="SetForm" Label="Form" ToStringFunc="@(e => list[e])"
  AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" Dense>
  @foreach (var (form, index) in list.Select((form, index) => (form, index)))
      {
        <MudSelectItem Value="index" />
      }
      </MudSelect>
  }

  @if (saveFile.Generation >= 2)
  {
    <MudAutocomplete Margin="Margin.Dense" Dense="true" T="int" Value="pkm.HeldItem" SearchFunc="@SearchItems"
  ToStringFunc="@(e=> Util.GetItemsList("en")[e])" MaxItems="10" ValueChanged="ItemsChanged" Label="Item" />
  }

  <AbilityPicker />
}

@code {
  private PKM pkm;

  protected override void OnInitialized()
  {
    PokemonEditorService.OnChange += StateHasChanged;
    PokemonEditorService.OnChange += SetPokemon;
    pkm = PokemonEditorService.Pokemon;
  }

  private void SetPokemon()
  {
    pkm = PokemonEditorService.Pokemon;
  }

  private Task<IEnumerable<int>> Search(string value)
  {
    var species = GameInfo.SpeciesDataSource.Skip(1).Where(x => x.Text.Contains(value,
    StringComparison.InvariantCultureIgnoreCase)).OrderBy(x => x.Text).Select(x => x.Value);
    return Task.FromResult(species);
  }

  private void SpeciesChanged(int speciesId)
  {
    pkm.Species = speciesId;
    pkm.IsNicknamed = false;
    pkm.RefreshAbility(0);
    pkm.ClearNickname();
    PokemonEditorService.NotifyDataChanged();
  }

  private void SetForm(int formId)
  {
    pkm.SetForm(formId);
    PokemonEditorService.NotifyDataChanged();
  }

  private Task<IEnumerable<int>> SearchNatures(string value)
  {
    var natures = Util.GetNaturesList("en").Select((name, index) => new
    {
      Name = name,
      Index = index
    }).Where(x => x.Name.Contains(value,
    StringComparison.InvariantCultureIgnoreCase)).OrderBy(x => x.Name).Select(x => x.Index);
    return Task.FromResult(natures);
  }

  private void NatureChanged(int natureId)
  {
    if (SaveFileService.SaveFile.Generation >= 8)
    {
      pkm.Nature = natureId;
      return;
    }
    pkm.SetNature(natureId);
  }

  private Task<IEnumerable<int>> SearchItems(string value)
  {
    var items = GameInfo.ItemDataSource.Where(x => x.Text.Contains(value,
    StringComparison.InvariantCultureIgnoreCase)).Select(x => x.Value);
    return Task.FromResult(items);
  }

  private void ItemsChanged(int itemId)
  {
    pkm.ApplyHeldItem(itemId, SaveFileService.SaveFile.Generation);
  }

  private void SetNickname(string value)
  {
    pkm.IsNicknamed = true;
    pkm.Nickname = value;
  }

  private void SetIsNicknamed(bool value)
  {
    pkm.IsNicknamed = value;
    if (value == false)
    {
      pkm.ClearNickname();
    }
  }

  public void Dispose()
  {
    PokemonEditorService.OnChange -= StateHasChanged;
    PokemonEditorService.OnChange -= SetPokemon;
  }
}
