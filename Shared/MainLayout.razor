@using System.IO

@inherits LayoutComponentBase
@implements IDisposable

@inject Services.SaveFileService SaveFileService
@inject Services.PokemonEditorService PokemonEditorService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JS

<MudThemeProvider Theme="MyCustomTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Dense>
        <MudText Typo="Typo.h5" Class="ml-3">PKHeX.Web</MudText>

        <MudSpacer />

        @if (SaveFileService.SaveFile == null)
        {
            <InputFile id="fileInput" OnChange="UploadSave" hidden />

            <MudButton Disabled="@isLoading" HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" class="mx-auto"
            for="fileInput">
                @if (isLoading)
                {
                    <MudProgressCircular Color="Color.Primary" Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing save</MudText>
                }
                else
                {
                    <MudText>Upload a save file</MudText>
                }
            </MudButton>
        }
        else
        {
            <MudText Typo="Typo.h6">@SaveFileService.SaveFile.Metadata.BAKName.Replace(".bak", "")</MudText>
        }

        <MudSpacer />

        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Dark" AnchorOrigin="Origin.BottomCenter">
            <MudMenuItem OnClick="ExportSAV">
                Export SAV
            </MudMenuItem>
            <MudMenuItem OnClick="OpenAbout">
                About
            </MudMenuItem>
        </MudMenu>
    </MudAppBar>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        SaveFileService.OnChange += StateHasChanged;
    }

    MudTheme MyCustomTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = Colors.Blue.Default,
            Secondary = Colors.Green.Accent4,
            AppbarBackground = Colors.Red.Default,
        }
    };

    private async void UploadSave(InputFileChangeEventArgs e)
    {
        isLoading = true;

        using var memoryStream = new MemoryStream();
        await e.File.OpenReadStream(e.File.Size).CopyToAsync(memoryStream);

        FileUtil.TryGetSAV(memoryStream.ToArray(), out var saveFile);

        if (saveFile == null)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("The save file could not be recognized.", MudBlazor.Severity.Error);
        }
        else
        {
            SaveFileService.SaveFile = saveFile;
            var blankPokemon = PKMConverter.GetBlank(saveFile.Generation, saveFile.Version);
            EntityTemplates.TemplateFields(blankPokemon, saveFile);
            PokemonEditorService.Pokemon = blankPokemon;
        }

        isLoading = false;
    }

    private async Task ExportSAV()
    {
        var saveFile = SaveFileService.SaveFile;
        var extension = saveFile.Metadata.GetSuggestedExtension();
        var flags = saveFile.Metadata.GetSuggestedFlags(extension);

        var fileStream = new MemoryStream(saveFile.Write(flags));
        var fileName = saveFile.Metadata.BAKName.Replace(".bak", extension).Remove(0, 1);

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private void OpenAbout()
    {
        var options = new DialogOptions { CloseButton = true };
        DialogService.Show<About>("About", options);
    }

    public void Dispose()
    {
        SaveFileService.OnChange -= StateHasChanged;
    }
}